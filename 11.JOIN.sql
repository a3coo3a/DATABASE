-- 조인 연습하기
/*
CREATE TABLE INFO 
(
  ID NUMBER NOT NULL 
, TITLE VARCHAR2(50) 
, CONTENT VARCHAR2(100) 
, REGDATE DATE DEFAULT sysdate 
, USER_ID VARCHAR2(50) 
, CONSTRAINT INFO_PK PRIMARY KEY 
  (
    ID 
  )
  ENABLE 
);

CREATE TABLE AUTH 
(
  USER_ID VARCHAR2(50) NOT NULL 
, NAME VARCHAR2(50) 
, COLUMN2 VARCHAR2(50) 
, CONSTRAINT AUTH_PK PRIMARY KEY 
  (
    USER_ID 
  )
  ENABLE 
);

*/

SELECT * FROM INFO;
SELECT * FROM AUTH;

-- INNER JOIN
-- INFO의 유저아이디와 AUTH의 유저아이디가 똑같으면 연결해라!
SELECT
    *
FROM INFO INNER JOIN AUTH ON INFO.USER_ID = AUTH.USER_ID;
-- SELECT 구문에 필요한 컬럼 지정
SELECT
    ID, TITLE, CONTENT, REGDATE, NAME, JOB
FROM INFO INNER JOIN AUTH ON INFO.USER_ID = AUTH.USER_ID;
-- 두 테이블의 공통으로 있는 USER_ID의 경우 두테이블 중 
-- 어디의 USER_ID인지 확실하지 않아 에러 발생
SELECT
    ID, TITLE, CONTENT, REGDATE, NAME, JOB, INFO.USER_ID
FROM INFO INNER JOIN AUTH ON INFO.USER_ID = AUTH.USER_ID;

-- 테이블에 별칭을 이용해서 JOIN을 할 수 있습니다
-- I와 A가 별칭이 됨.
SELECT
    *
FROM INFO I INNER JOIN AUTH A ON I.USER_ID = A.USER_ID;

SELECT
   ID, TITLE, CONTENT, REGDATE, NAME, JOB, I.USER_ID
FROM INFO I INNER JOIN AUTH A ON I.USER_ID = A.USER_ID;

-- WHERE절
SELECT
   ID, TITLE, CONTENT, REGDATE, NAME, JOB, I.USER_ID
FROM INFO I INNER JOIN AUTH A ON I.USER_ID = A.USER_ID
WHERE ID = 1;

SELECT
   ID, TITLE, CONTENT, REGDATE, NAME, JOB, I.USER_ID
FROM INFO I INNER JOIN AUTH A ON I.USER_ID = A.USER_ID
WHERE NAME = '홍길동';

-- -----------------------------------------------------------------
-- OUTER JOIN
-- LEFT, RIGHT, FULL

-- LEFT OUTER JOIN
SELECT
    *
FROM INFO I LEFT OUTER JOIN AUTH A ON I.USER_ID = A.USER_ID;
-- RIGHT OUTER JOIN
SELECT
    *
FROM INFO I RIGHT OUTER JOIN AUTH A ON I.USER_ID = A.USER_ID;
-- FULL OUTER JOIN
SELECT
    *
FROM INFO I FULL OUTER JOIN AUTH A ON I.USER_ID = A.USER_ID;
-- CROSS JOIN
SELECT
    *
FROM INFO I CROSS JOIN AUTH A;

-- JOIN이 3개 테이블도 가능
-- 키값만 찾아서 구문을 연결해서 쓰면 됨
SELECT * FROM EMPLOYEES;
SELECT * FROM DEPARTMENTS;
SELECT * FROM LOCATIONS;

SELECT
    *
FROM EMPLOYEES E
LEFT OUTER JOIN DEPARTMENTS D 
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
LEFT OUTER JOIN LOCATIONS L
ON L.LOCATION_ID = D.LOCATION_ID;


-- 테이블 AUTH와 INFO에서 엘리어스 A, I를 이용해서 LEFT JOIN - JOB컬럼이 DBA인 사람의 
-- ID, TITLE, CONTENT, JOB만 출력
SELECT 
    ID, TITLE, CONTENT, JOB
FROM INFO I
LEFT JOIN AUTH A ON I.USER_ID = A.USER_ID
WHERE JOB = 'DBA';
-- 조건, RIGHT JOIN으로 달라지는 결과 확인
SELECT 
    ID, TITLE, CONTENT, JOB
FROM INFO I
RIGHT JOIN AUTH A ON I.USER_ID = A.USER_ID
WHERE JOB = 'DBA';

-- SELF JOIN
-- 하나의 테이블에 연결된 키값으로 JOIN하는 형태
SELECT
    *
FROM EMPLOYEES E1
LEFT OUTER JOIN EMPLOYEES E2 
ON E1.MANAGER_ID = E2.MANAGER_ID;

-- -----------------------연습문제---------------------
--문제 1.
---EMPLOYEES 테이블과, DEPARTMENTS 테이블은 DEPARTMENT_ID로 연결되어 있습니다.
---EMPLOYEES, DEPARTMENTS 테이블을 엘리어스를 이용해서
--각각 INNER , LEFT OUTER, RIGHT OUTER, FULL OUTER 조인 하세요. (달라지는 행의 개수 확인)
SELECT *
FROM EMPLOYEES E
INNER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;  -- 행 106개

SELECT *
FROM EMPLOYEES E
LEFT OUTER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;  -- 행 107개

SELECT *
FROM EMPLOYEES E
RIGHT OUTER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;  -- 행 122개

SELECT *
FROM EMPLOYEES E
FULL JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;  -- 행 123개

--문제 2.
---EMPLOYEES, DEPARTMENTS 테이블을 INNER JOIN하세요
--조건)employee_id가 200인 사람의 이름, department_id를 출력하세요
--조건)이름 컬럼은 first_name과 last_name을 합쳐서 출력합니다
SELECT 
    CONCAT(CONCAT(FIRST_NAME, ' '),LAST_NAME) AS 이름, E.DEPARTMENT_ID
FROM EMPLOYEES E
INNER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID 
WHERE EMPLOYEE_ID = 200;

--문제 3.
---EMPLOYEES, JOBS테이블을 INNER JOIN하세요
--조건) 모든 사원의 이름과 직무아이디, 직무 타이틀을 출력하고, 이름 기준으로 오름차순 정렬
--HINT) 어떤 컬럼으로 서로 연결되 있는지 확인
SELECT * FROM EMPLOYEES;
SELECT * FROM JOBS; -- KEY: JOB_ID

SELECT 
    LAST_NAME, E.JOB_ID, JOB_TITLE
FROM EMPLOYEES E
INNER JOIN JOBS J
ON E.JOB_ID = J.JOB_ID
ORDER BY LAST_NAME ASC;

--문제 4.
----JOBS테이블과 JOB_HISTORY테이블을 LEFT_OUTER JOIN 하세요.
SELECT * FROM JOBS;
SELECT * FROM JOB_HISTORY;  -- KEY : JOB_ID

SELECT *
FROM JOBS J
LEFT OUTER JOIN JOB_HISTORY JH
ON J.JOB_ID = JH.JOB_ID;

--문제 5.
----Steven King의 부서명을 출력하세요.
SELECT * FROM EMPLOYEES;
SELECT * FROM DEPARTMENTS; -- KEY ; DEPARTMENT_ID

SELECT
    CONCAT(CONCAT(FIRST_NAME, ' '),LAST_NAME) AS NAME, DEPARTMENT_NAME
FROM EMPLOYEES E
LEFT OUTER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE CONCAT(CONCAT(FIRST_NAME, ' '),LAST_NAME) = 'Steven King';

--문제 6.
----EMPLOYEES 테이블과 DEPARTMENTS 테이블을 Cartesian Product(Cross join)처리하세요
SELECT *
FROM EMPLOYEES
CROSS JOIN DEPARTMENTS;

--문제 7.
----EMPLOYEES 테이블과 DEPARTMENTS 테이블의 부서번호를 조인하고 SA_MAN 사원만의 사원번호, 이름,
--급여, 부서명, 근무지를 출력하세요. (Alias를 사용)
SELECT * FROM LOCATIONS;
SELECT 
    EMPLOYEE_ID, CONCAT(CONCAT(FIRST_NAME, ' '),LAST_NAME) AS NAME,
    SALARY, DEPARTMENT_NAME, STREET_ADDRESS
FROM EMPLOYEES E
INNER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
INNER JOIN LOCATIONS L
ON D.LOCATION_ID = L.LOCATION_ID
WHERE JOB_ID = 'SA_MAN';

--문제 8.
---- employees, jobs 테이블을 조인 지정하고 
-- job_title이 'Stock Manager', 'Stock Clerk'인 직원 정보만
--출력하세요.
SELECT * FROM JOBS;

SELECT * 
FROM EMPLOYEES E
JOIN JOBS J
ON E.JOB_ID = J.JOB_ID
WHERE JOB_TITLE IN('Stock Manager', 'Stock Clerk');

--문제 9.
---- departments 테이블에서 직원이 없는 부서를 찾아 출력하세요. LEFT OUTER JOIN 사용
SELECT * FROM EMPLOYEES;
SELECT * FROM DEPARTMENTS;

SELECT 
    D.DEPARTMENT_ID,
    DEPARTMENT_NAME
FROM DEPARTMENTS D
LEFT OUTER JOIN EMPLOYEES E
ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
WHERE EMPLOYEE_ID IS NULL;

--문제 10.
---join을 이용해서 사원의 이름과 그 사원의 매니저 이름을 출력하세요
--힌트) EMPLOYEES 테이블과 EMPLOYEES 테이블을 조인하세요.
SELECT 
    CONCAT(CONCAT(E1.FIRST_NAME, ' '),E1.LAST_NAME) AS 사원이름,
    CONCAT(CONCAT(E2.FIRST_NAME, ' '),E2.LAST_NAME) AS 매니저이름
FROM EMPLOYEES E1
LEFT OUTER JOIN EMPLOYEES E2
ON E1.MANAGER_ID = E2.EMPLOYEE_ID;

--문제 11.
----6. EMPLOYEES 테이블에서 left join하여 관리자(매니저)와, 매니저의 이름, 매니저의 급여 까지 출력하세요
----매니저 아이디가 없는 사람은 배제하고 급여는 역순으로 출력하세요
SELECT * FROM EMPLOYEES;

SELECT 
    CONCAT(CONCAT(E1.FIRST_NAME, ' '),E1.LAST_NAME) AS 이름,
    CONCAT(CONCAT(E2.FIRST_NAME, ' '),E2.LAST_NAME) AS 매니저이름,
    E2.SALARY AS 매니저급여
FROM EMPLOYEES E1
LEFT OUTER JOIN EMPLOYEES E2
ON E1.MANAGER_ID = E2.EMPLOYEE_ID
WHERE E1.MANAGER_ID IS NOT NULL
ORDER BY E2.SALARY DESC;
-- LEFT JOIN 이 아닌 INNER JOIN 이 었으면 WHERE 절은 필요없음
